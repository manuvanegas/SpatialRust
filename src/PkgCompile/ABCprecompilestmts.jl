precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Pkg.REPLMode.parse_activate), Array{Pkg.REPLMode.QString, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Pkg.REPLMode.Command}, Pkg.REPLMode.CommandSpec, Base.Dict{Symbol, Any}, Array{String, 1}})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Pkg.Versions.VersionBound}, Pkg.Versions.VersionBound})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Pkg.Versions.semver_interval), Base.RegexMatch})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Versions.VersionRange, 1}, Pkg.Versions.VersionRange})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.var"#67#70"{REPL.LineEdit.Prompt}, String}, Any, Any})
precompile(Tuple{REPL.var"#67#70"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.var"#68#71"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Lz4_jll.__init__)})
precompile(Tuple{typeof(Lz4_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Zstd_jll.find_artifact_dir)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.resize!), Array{Base.GMP.BigInt, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{Base.MPFR.BigFloat, 1}, Int64})
precompile(Tuple{typeof(TimeZones.TZData.__init__)})
precompile(Tuple{typeof(Base.:(-)), Int32})
precompile(Tuple{Type{Base.UUID}, Nothing})
precompile(Tuple{typeof(Scratch.get_scratch!), Base.UUID, String, Base.UUID})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, Vararg{String}})
precompile(Tuple{typeof(TimeZones.__init__)})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, Vararg{AbstractString}})
precompile(Tuple{Type{Dates.DatePart{Char(0x7a000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Arrow.__init__)})
precompile(Tuple{typeof(TranscodingStreams.initialize), CodecLz4.LZ4FrameCompressor})
precompile(Tuple{typeof(CodecLz4.LZ4F_createCompressionContext), Base.RefValue{Ptr{CodecLz4.LZ4F_cctx}}, UInt32})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(FileIO.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(Base.resize!), Array{URIs.RegexAndMatchData, 1}, Int64})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_read), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_write), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.__init__)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.resize!), Array{HTTP.Parsers.RegexAndMatchData, 1}, Int64})
precompile(Tuple{typeof(HTTP.ConnectionPool.__init__)})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int8}}, Ptr{Nothing}})
precompile(Tuple{Type{OpenSSL.SSLContext}, OpenSSL.SSLMethod, String})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.MultiPartParsing.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{FileIO.var"#42#45"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{FileIO.var"#43#46"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{FileIO.var"#44#47"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{typeof(Base.convert), Type{Integer}, Int64})
precompile(Tuple{typeof(Parsers.token), Nothing, String})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Integer}}, Int64})
precompile(Tuple{Type{CSV.Context}, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Integer}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8, String}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, String, Parsers.Format, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Dates.DateFormat{S, T} where T<:Tuple where S}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Type}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Function, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Type}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Type, Type}})
precompile(Tuple{typeof(CSV.getbytebuffer), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Any, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.skipemptyrow), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool})
precompile(Tuple{Type{Parsers.Options}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Any, Bool, UInt8, UInt8, UInt8, Nothing, Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#14#17"{Bool}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#14#17"{Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{CSV.var"#initialize_columns##kw", NamedTuple{(:validate,), Tuple{Bool}}, typeof(CSV.initialize_columns), Int64, Nothing, Array{Symbol, 1}, Type, Vararg{Any}})
precompile(Tuple{CSV.var"##initialize_columns#26", Bool, typeof(CSV.initialize_columns), Int64, Nothing, Array{Symbol, 1}, Type, Vararg{Any}})
precompile(Tuple{typeof(CSV.initialize_column), Int64, Nothing, Array{Symbol, 1}, Type, Bool, Parsers.Options})
precompile(Tuple{typeof(Base.nonmissingtype), Type{CSV.NeedsTypeDetection}})
precompile(Tuple{typeof(Base.values), Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(CSV.getpool), Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getname), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.Dict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool, Nothing})
precompile(Tuple{typeof(Agents.__init__)})
precompile(Tuple{typeof(OpenLibm_jll.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Core.convert), Type{UnionAll}, Type{Type}})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Rmath_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(DrWatson.__init__)})
precompile(Tuple{DrWatson.var"#79#82"})
precompile(Tuple{DrWatson.var"#80#83"})
precompile(Tuple{DrWatson.var"#81#84"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.source_path), Nothing})
precompile(Tuple{typeof(DrWatson.include), String})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LineNumberNode, 1}}})
precompile(Tuple{DocStringExtensions.var"#32#33"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Symbol}})
precompile(Tuple{REPL.LineEdit.var"#137#191", REPL.LineEdit.MIState, Any, Union{Char, Base.SubString{String}, String}})
precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, Any})
precompile(Tuple{REPL.LineEdit.var"#114#168", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#41", Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{REPL.LineEdit.var"#refresh_multi_line##kw", Any, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, Any})
precompile(Tuple{typeof(REPL.Terminals.clear_line), REPL.Terminals.TerminalBuffer})
precompile(Tuple{Pkg.REPLMode.var"#30#32"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{typeof(REPL.Terminals.cmove_up), REPL.Terminals.TerminalBuffer})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{Type{NamedTuple{(:p_row, :max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Bool}}, Symbol})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:p_row, :max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Int64, 1}, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Float64, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(), Tuple{}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Int64, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64}}}, Tuple{Bool}})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:bold,), Tuple{Bool}}, Type{Crayons.Crayon}})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:foreground,), Tuple{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.promote_type), Type, Type, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, DataFrames.DataFrame})
precompile(Tuple{Base.var"#4#5"{DataFrames.var"#800#802"{Base.Dict{Any, String}}}, Tuple{DataType, Int64}})
precompile(Tuple{typeof(Base.get!), DataFrames.var"#801#803"{DataType, Int64}, Base.Dict{Any, String}, Type{Int64}})
precompile(Tuple{typeof(Base.get!), DataFrames.var"#801#803"{DataType, Int64}, Base.Dict{Any, String}, Type{Float64}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Int64}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Float64}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.TTY}, Symbol, Nothing})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{PrettyTables.var"#_pt_text##kw", NamedTuple{(:alignment_anchor_fallback, :alignment_anchor_regex, :crop, :ellipsis_line_skip, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :reserved_display_lines, :row_label_crayon, :vcrop_mode, :vlines), Tuple{Symbol, Base.Dict{Int64, Array{Base.Regex, 1}}, Symbol, Int64, Array{Symbol, 1}, Tuple{PrettyTables.Highlighter}, Array{Int64, 1}, Bool, Int64, Crayons.Crayon, Symbol, Array{Int64, 1}}}, typeof(PrettyTables._pt_text), Base.IOContext{Base.TTY}, PrettyTables.PrintInfo})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Base.IOContext{Base.TTY}, Array{Array{String, 1}, 2}, PrettyTables.ProcessedTable, Array{Int64, 1}, PrettyTables.Display, Ref{Any}, Array{Int64, 1}, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Base.Val{:print}, Symbol})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(PrettyTables._convert_axes), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{typeof(PrettyTables._convert_axes), Array{String, 1}, Int64})
precompile(Tuple{typeof(PrettyTables._convert_axes), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(Base.isassigned), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(Tables.getcolumn), DataFrames.DataFrameColumns{DataFrames.DataFrame}, Symbol})
precompile(Tuple{typeof(Base.getindex), PrettyTables.ColumnTable, Int64, Int64})
precompile(Tuple{typeof(DataFrames._pretty_tables_general_formatter), Int64, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.TTY}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(DataFrames._pretty_tables_general_formatter), Float64, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.TTY}, Float64})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(PrettyTables._process_data_cell_text), PrettyTables.ProcessedTable, Int64, String, Int64, Int64, Int64, Int64, Crayons.Crayon, Symbol, Ref{Any}})
precompile(Tuple{typeof(Base.getproperty), PrettyTables.Highlighter, Symbol})
precompile(Tuple{typeof(PrettyTables._getdata), PrettyTables.ColumnTable})
precompile(Tuple{typeof(DataFrames._pretty_tables_highlighter_func), DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(PrettyTables._process_data_cell_text), PrettyTables.ProcessedTable, Float64, String, Int64, Int64, Int64, Int64, Crayons.Crayon, Symbol, Ref{Any}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#14", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.:(-)), Base.CoreLogging.LogLevel, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Nothing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Arrow.Table}, String})
precompile(Tuple{typeof(Arrow.FlatBuffers.init), Type{Arrow.Flatbuf.Schema}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Arrow.Flatbuf.Schema}, Arrow.Flatbuf.Schema})
precompile(Tuple{typeof(Arrow.FlatBuffers.init), Type{Arrow.Flatbuf.RecordBatch}, Array{UInt8, 1}, Int64})
precompile(Tuple{Arrow.var"#104#110"{Base.Channel{Any}, Arrow.Table}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CodecLz4.LZ4F_dctx}}, Ptr{Nothing}})
precompile(Tuple{Type{Ptr{CodecLz4.LZ4F_dctx}}, Ptr{Nothing}})
precompile(Tuple{Type{CodecLz4.LZ4Exception}, String, String})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Int64, Int64, Symbol}}, Tuple{Int64, Int64, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Base.convert), Type{CodecZstd.LibZstd.ZSTD_ResetDirective}, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Base.unsafe_convert), Type{CodecZstd.LibZstd.ZSTD_ResetDirective}, CodecZstd.LibZstd.ZSTD_ResetDirective})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CodecZstd.LibZstd.ZSTD_DCtx_s}}, Ptr{Nothing}})
precompile(Tuple{Type{Base.ImmutableDict{String, String}}})
precompile(Tuple{typeof(WorkerUtilities.closed_exception)})
precompile(Tuple{Arrow.var"#108#114"{Bool, Base.Channel{Any}, WorkerUtilities.OrderedSynchronizer, Base.Dict{Int64, Arrow.DictEncoding{T, S, A} where A where S where T}, Arrow.Batch, Int64}})
precompile(Tuple{typeof(Arrow.build), Arrow.Flatbuf.Field, Arrow.Batch, Arrow.Flatbuf.RecordBatch, Base.Dict{Int64, Arrow.DictEncoding{T, S, A} where A where S where T}, Int64, Int64, Bool})
precompile(Tuple{typeof(Arrow.FlatBuffers.init), Type{Arrow.Flatbuf.Int}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Arrow.build), Arrow.Flatbuf.Field, Arrow.Flatbuf.Int, Arrow.Batch, Arrow.Flatbuf.RecordBatch, Base.Dict{Int64, Arrow.DictEncoding{T, S, A} where A where S where T}, Int64, Int64, Bool})
precompile(Tuple{typeof(Arrow.juliaeltype), Arrow.Flatbuf.Field, Arrow.Flatbuf.Int, Bool})
precompile(Tuple{typeof(Arrow.reinterp), Type{Int64}, Arrow.Batch, Arrow.Flatbuf.Buffer, Nothing})
precompile(Tuple{typeof(Arrow.finaljuliatype), Type})
precompile(Tuple{Type{Arrow.Primitive{T, A} where A where T}, Type{Int64}, Array{UInt8, 1}, Arrow.ValidityBitmap, Array{Int64, 1}, Int64, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.Primitive{Int64, Array{Int64, 1}}, Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.Primitive{Int64, Array{Int64, 1}}, Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.foreach), Arrow.var"#105#111"{Arrow.Table}, Array{Any, 1}})
precompile(Tuple{Arrow.var"#105#111"{Arrow.Table}, Arrow.Primitive{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s81", 1} where var"#s81"}, Arrow.Primitive{Int64, Array{Int64, 1}}, Symbol})
precompile(Tuple{typeof(Base.eltype), Arrow.Primitive{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Arrow.buildmetadata), Arrow.Flatbuf.Schema})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Nothing, Base.ImmutableDict{String, String}}}, Nothing})
precompile(Tuple{typeof(Base.getindex), Arrow.Table, Int64})
precompile(Tuple{Type{Array{T, 1} where T}, Arrow.Primitive{Int64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.TTY}, Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String, Int64})
precompile(Tuple{typeof(Base.filter), Main.var"#1#2", Array{Int64, 1}})
precompile(Tuple{typeof(Base.filter), Main.var"#3#4", Array{Int64, 1}})
precompile(Tuple{typeof(Arrow.FlatBuffers.init), Type{Arrow.Flatbuf.FloatingPoint}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Arrow.build), Arrow.Flatbuf.Field, Arrow.Flatbuf.FloatingPoint, Arrow.Batch, Arrow.Flatbuf.RecordBatch, Base.Dict{Int64, Arrow.DictEncoding{T, S, A} where A where S where T}, Int64, Int64, Bool})
precompile(Tuple{typeof(Arrow.juliaeltype), Arrow.Flatbuf.Field, Arrow.Flatbuf.FloatingPoint, Bool})
precompile(Tuple{typeof(Arrow.reinterp), Type{Float64}, Arrow.Batch, Arrow.Flatbuf.Buffer, Nothing})
precompile(Tuple{Type{Arrow.Primitive{T, A} where A where T}, Type{Float64}, Array{UInt8, 1}, Arrow.ValidityBitmap, Array{Float64, 1}, Int64, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.Primitive{Float64, Array{Float64, 1}}, Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.Primitive{Float64, Array{Float64, 1}}, Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Arrow.FlatBuffers.init), Type{Arrow.Flatbuf.Bool}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(Arrow.build), Arrow.Flatbuf.Field, Arrow.Flatbuf.Bool, Arrow.Batch, Arrow.Flatbuf.RecordBatch, Base.Dict{Int64, Arrow.DictEncoding{T, S, A} where A where S where T}, Int64, Int64, Bool})
precompile(Tuple{typeof(Arrow.juliaeltype), Arrow.Flatbuf.Field, Arrow.Flatbuf.Bool, Bool})
precompile(Tuple{Type{Arrow.BoolVector{Bool}}, Array{UInt8, 1}, Int64, Arrow.ValidityBitmap, Int64, Nothing})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.BoolVector{Bool}, Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Arrow.BoolVector{Bool}, Int64, Int64}, Int64, Int64})
precompile(Tuple{Arrow.var"#105#111"{Arrow.Table}, Arrow.Primitive{Float64, Array{Float64, 1}}})
precompile(Tuple{Arrow.var"#105#111"{Arrow.Table}, Arrow.BoolVector{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s81", 1} where var"#s81"}, Arrow.Primitive{Float64, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.eltype), Arrow.Primitive{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{var"#s81", 1} where var"#s81"}, Arrow.BoolVector{Bool}, Symbol})
precompile(Tuple{typeof(Base.eltype), Arrow.BoolVector{Bool}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Type, 1}}})
precompile(Tuple{BitIntegers.var"##s7#5", Any, Any, Any, Any})
precompile(Tuple{BitIntegers.var"##s50#7", Any, Any, Any, Type, Any})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.Int1024}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.Int1024}, Int64})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.Int1024}})
precompile(Tuple{BitIntegers.var"##s50#6", Any, Any, Any, Any})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt1024}, BitIntegers.Int1024})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.UInt1024}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.UInt1024}, UInt64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt1024}, Int64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.Int1024}, BitIntegers.UInt1024})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.UInt1024}})
precompile(Tuple{typeof(Base.convert), Type{Unsigned}, BitIntegers.UInt1024})
precompile(Tuple{typeof(Base.trailing_zeros), Int64})
precompile(Tuple{BitIntegers.var"##s50#8", Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BitIntegers.var"#9#10"{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, BitIntegers.var"#9#10"{Int64, Int64}}})
precompile(Tuple{Type{BitIntegers.UInt1024}, BitIntegers.UInt1024})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.UInt1024})
precompile(Tuple{typeof(Base.:(==)), Function, Function})
precompile(Tuple{typeof(Base.:(&)), UInt64, Int64})
precompile(Tuple{Type{BitIntegers.Int1024}, BitIntegers.Int1024})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.Int1024})
precompile(Tuple{Type{BitIntegers.Int1024}, Int64})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.Int256}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.Int256}, Int64})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.Int256}})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt256}, BitIntegers.Int256})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.UInt256}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.UInt256}, UInt64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt256}, Int64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.Int256}, BitIntegers.UInt256})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.UInt256}})
precompile(Tuple{typeof(Base.convert), Type{Unsigned}, BitIntegers.UInt256})
precompile(Tuple{Type{BitIntegers.UInt256}, BitIntegers.UInt256})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.UInt256})
precompile(Tuple{Type{BitIntegers.Int256}, BitIntegers.Int256})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.Int256})
precompile(Tuple{Type{BitIntegers.Int256}, Int64})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.Int512}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.Int512}, Int64})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.Int512}})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt512}, BitIntegers.Int512})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{BitIntegers.UInt512}, Type{Union{}}})
precompile(Tuple{typeof(Base.convert), Type{BitIntegers.UInt512}, UInt64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.UInt512}, Int64})
precompile(Tuple{typeof(Core.check_top_bit), Type{BitIntegers.Int512}, BitIntegers.UInt512})
precompile(Tuple{typeof(Base.promote_result), Type, Type, Type{Union{}}, Type{BitIntegers.UInt512}})
precompile(Tuple{typeof(Base.convert), Type{Unsigned}, BitIntegers.UInt512})
precompile(Tuple{Type{BitIntegers.UInt512}, BitIntegers.UInt512})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.UInt512})
precompile(Tuple{Type{BitIntegers.Int512}, BitIntegers.Int512})
precompile(Tuple{typeof(Base.:(-)), BitIntegers.Int512})
precompile(Tuple{Type{BitIntegers.Int512}, Int64})
precompile(Tuple{Mmap.var"#3#5"{Ptr{Nothing}, Int64}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Arrow.Table})
precompile(Tuple{typeof(Base.length), Arrow.Primitive{Int64, Array{Int64, 1}}})
precompile(Tuple{Type{Tables.Schema{(:dayN, :MeanTa, :Rainy, :Windy), Tuple{Int64, Float64, Bool, Bool}}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Bool}, Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#11#12"{Tuple{Int64, Float64, Bool, Bool}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Iterators.rest), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Int64, Float64, Bool, Bool}}}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Int64, Float64, Bool, Bool}}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, Tables.var"#11#12"{Tuple{Int64, Float64, Bool, Bool}}}})
precompile(Tuple{Base.Iterators.var"#12#13"{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Base.Iterators._prod_indices), Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Iterators._piterate), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.to_shape), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.first), Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Tables.Schema{(:dayN, :MeanTa, :Rainy, :Windy), Tuple{Int64, Float64, Bool, Bool}}})
precompile(Tuple{typeof(Base.collect), Tuple{DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.hcat), Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.print_matrix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 2}})
precompile(Tuple{typeof(Base.isassigned), Array{Any, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.print_matrix_row), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, Array{Tuple{Int64, Int64}, 1}, Int64, Array{Int64, 1}, String, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Symbol})
precompile(Tuple{typeof(Base.replace_in_print_matrix), Array{Any, 2}, Int64, Int64, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Type})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Float64, 1}}})
precompile(Tuple{Type{Tuple}, Arrow.Primitive{Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{Tuple}, Arrow.BoolVector{Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}})
precompile(Tuple{REPL.var"#78#88"{REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.eachrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.map), Function, DataFrames.DataFrameRows{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#5#6", DataFrames.DataFrameRows{DataFrames.DataFrame}})
precompile(Tuple{Type{NamedTuple{(:replace,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:replace,), Tuple{Bool}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:replace, :ordered), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:replace, :ordered), Tuple{Bool, Bool}}, Symbol})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}}, Function, Tuple{Int64}, Nothing})
precompile(Tuple{typeof(Base.:(==)), Int64})
precompile(Tuple{Type{MethodError}, Any, Any, UInt64})
precompile(Tuple{Type{MethodError}, Any, Any})
precompile(Tuple{Type{NamedTuple{(:periodic, :metric), T} where T<:Tuple}, Tuple{Bool, Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:periodic, :metric), Tuple{Bool, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.isequal), Symbol})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), Symbol}, Symbol})
precompile(Tuple{Type{Distributions.Normal{T} where T<:Real}, Float64, Float64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.iszero), Float64})
precompile(Tuple{typeof(StatsFuns.zval), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:invsqrt2}})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Base.abs2), Float64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Distributions.Normal{Float64}}, Distributions.Normal{Float64}})
precompile(Tuple{typeof(Statistics.mean), Distributions.Normal{Float64}})
precompile(Tuple{typeof(Statistics.std), Distributions.Normal{Float64}})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Iterators.ProductIterator{T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpatialRust.var"#33#35", Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, SpatialRust.var"#34#36", Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.ceil), Type{Integer}, Float64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{typeof(Base.isodd), Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Float64})
precompile(Tuple{typeof(Base.Broadcast.extrude), Float64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Float64, Int64})
precompile(Tuple{typeof(Base.getindex), Float64})
precompile(Tuple{typeof(Base.:(!=)), Function, Function})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:style,), Tuple{Bool}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:style,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.ntuple), Base.Returns{Base.OneTo{Int64}}, Base.Val{1}})
precompile(Tuple{Type{NamedTuple{(:copycols, :keeprows, :renamecols), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, Symbol})
precompile(Tuple{Type{Base.BottomRF{Base.var"#57#58"{typeof(Base.wait)}}}, Function})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{typeof(Base.maximum), Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{typeof(Base.first), Symbol}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Vararg{Symbol}}})
precompile(Tuple{typeof(Printf.base), Type})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:modifier,), Tuple{String}}}, Tuple{String}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:modifier,), Tuple{String}}, Symbol})
precompile(Tuple{Type{Base.BottomRF{Base.var"#57#58"{typeof(Base.empty!)}}}, Function})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:keepkeys, :ungroup, :copycols, :keeprows, :renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:keepkeys, :ungroup, :copycols, :keeprows, :renamecols, :threads), Tuple{Bool, Bool, Bool, Bool, Bool, Bool}}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{typeof(Statistics.median), Symbol}})
precompile(Tuple{Type{StaticArrays.Length{L} where L}, Int64})
precompile(Tuple{Type{StaticArrays.Length{1}}})
precompile(Tuple{Type{Int64}, StaticArrays.Length{1}})
precompile(Tuple{StaticArrays.var"##s25#75", Any, Any, Any})
precompile(Tuple{typeof(Base.sqrt), Int64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{2}})
precompile(Tuple{Type{InvertedIndices.InvertedIndex{S} where S}, Symbol})
precompile(Tuple{typeof(Base.oneunit), Type{Union{}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{Type{NamedTuple{(:keep_present,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}}, Function, Tuple{Float64}, Nothing})
precompile(Tuple{Type{NamedTuple{(:on,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Function})
precompile(Tuple{Type{NamedTuple{(:view,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(>)), Float64})
precompile(Tuple{typeof(Core.convert), Type{Base.Fix2{typeof(Base.:(>)), Float64}}, Base.Fix2{typeof(Base.:(>)), Float64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{AbstractArray{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base.promote_typejoin_union), Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.collect_similar), DataFrames.DataFrameRows{DataFrames.DataFrame}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, Main.var"#5#6"}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, SpatialRust.var"#33#35"}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.Iterators._piterate), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#20#21", Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{SpatialRust.var"#33#35", Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.to_shape), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, SpatialRust.var"#33#35"}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.first), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.tail), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Iterators._piterate1), Tuple{Base.UnitRange{Int64}}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, SpatialRust.var"#34#36"}, Base.HasShape{2}})
precompile(Tuple{SpatialRust.var"#34#36", Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, SpatialRust.var"#34#36"}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(SpatialRust.simulate_plots), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Array{Int64, 1}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, Base.var"#194#195"{DataFrames.var"#301#303"{DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.SubIndex{DataFrames.Index, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}}}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type, Base.Generator{Base.UnitRange{Int64}, Base.var"#194#195"{DataFrames.var"#302#304"{Array{AbstractArray{T, 1} where T, 1}, Base.UnitRange{Int64}}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{Base.var"##s82#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:steps, :start_days_at, :common_map, :rain_data, :wind_data, :temp_data, :ini_rusts, :fungicide_sch), Tuple{Int64, Int64, Symbol, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, Float64, Array{Int64, 1}}}, NamedTuple{(:max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}})
precompile(Tuple{SpatialRust.var"#init_spatialrust##kw", NamedTuple{(:steps, :start_days_at, :common_map, :rain_data, :wind_data, :temp_data, :ini_rusts, :fungicide_sch, :max_inf, :host_spo_inh, :opt_g_temp, :max_g_temp, :spore_pct, :rust_paras, :exh_threshold, :rain_distance, :tree_block, :wind_distance, :shade_block, :lesion_survive), Tuple{Int64, Int64, Symbol, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}, Float64, Array{Int64, 1}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, typeof(SpatialRust.init_spatialrust)})
precompile(Tuple{Type{SpatialRust.Weather{231}}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{SpatialRust.MngPars{1, 0}}, Int64, Tuple{Int64}, Int64, Tuple{}, Bool, Float64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Float64, Int64})
precompile(Tuple{Type{SpatialRust.Props}, SpatialRust.Weather{231}, SpatialRust.CoffeePars, SpatialRust.RustPars, SpatialRust.MngPars{1, 0}, SpatialRust.Books, Array{Int64, 2}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{Type{Agents.GridSpaceSingle{2, false}}, Array{Int64, 2}, Symbol, Base.Dict{Float64, Array{Tuple{Int64, Int64}, 1}}, Base.Dict{Float64, Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:properties, :warn), Tuple{SpatialRust.Props, Bool}}, Type{Agents.AgentBasedModel{S, A, F, P, R} where R<:Random.AbstractRNG where P where F where A<:Agents.AbstractAgent where S<:Union{Nothing, Agents.AbstractSpace}}, Type{SpatialRust.Coffee}, Agents.GridSpaceSingle{2, false}})
precompile(Tuple{typeof(SpatialRust.add_abc_trees!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(<)), Int64})
precompile(Tuple{typeof(Base.axes), Base.UnitRange{Int64}})
precompile(Tuple{typeof(SpatialRust.init_rusts!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, Float64})
precompile(Tuple{typeof(Base.iterate), Array{SpatialRust.Coffee, 1}})
precompile(Tuple{typeof(Base.setproperty!), SpatialRust.Coffee, Symbol, Float64})
precompile(Tuple{typeof(Base.setproperty!), SpatialRust.Coffee, Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), SpatialRust.Coffee, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setproperty!), SpatialRust.Coffee, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setproperty!), SpatialRust.Coffee, Symbol, Array{Bool, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Bool, 1}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.push!), Base.Set{SpatialRust.Coffee}, SpatialRust.Coffee})
precompile(Tuple{typeof(Base.iterate), Array{SpatialRust.Coffee, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:by, :lt), Tuple{typeof(Base.real), typeof(Base.:(<))}}, Symbol})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{typeof(Base.:(<)), typeof(Base.real)}}}, Function})
precompile(Tuple{typeof(SpatialRust.setup_plant_sampling!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, Int64, Int64})
precompile(Tuple{typeof(SpatialRust.abc_run_2017!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, Function, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Missings.allowmissing), Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Int64}, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Missings.allowmissing), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Union{Base.Missing, Float64}, 1}, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(Base.sizehint!), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.sizehint!), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:atol,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:atol,), Tuple{Float64}}, Symbol})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Agents.step!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, typeof(Agents.dummystep), typeof(SpatialRust.step_model!), Int64, Bool})
precompile(Tuple{typeof(SpatialRust.disperse_wind!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, SpatialRust.Coffee})
precompile(Tuple{typeof(SpatialRust.disperse_rain!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, SpatialRust.Coffee})
precompile(Tuple{typeof(SpatialRust.try_outside_disp!), Random.TaskLocalRNG, Float64, Array{Int64, 2}, Array{Float64, 2}, SpatialRust.RustPars, Distributions.Exponential{Float64}, Int64})
precompile(Tuple{typeof(Base.append!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.append!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:lt,), Tuple{typeof(Base.:(<=))}}, Symbol})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{typeof(Base.:(<=)), typeof(Base.identity)}}}, Function})
precompile(Tuple{typeof(DataFrames._filter!_helper), DataFrames.DataFrame, Base.Fix2{typeof(Base.:(<=)), Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.deleteat!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Bool})
precompile(Tuple{typeof(Base.front), Tuple{}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{Base.var"#97#98"{typeof(Base.iszero)}, Bool})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Base.Val{false}, Array{Int64, 1}, Bool, Nothing})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{DataFrames.IntegerRefpool{Int64}, DataFrames.IntegerRefarray{Array{Int64, 1}}}}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Tuple{DataFrames.IntegerRefpool{Int64}}, Tuple{DataFrames.IntegerRefarray{Array{Int64, 1}}}, Base.Val{false}, Array{Int64, 1}, Bool, Bool})
precompile(Tuple{DataFrames.var"#467#484"{Tuple{DataFrames.IntegerRefarray{Array{Int64, 1}}}, Array{Int64, 1}, Bool, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Base.UnitRange{Int64}, Array{Bool, 1}}})
precompile(Tuple{DataFrames.var"#reduce_or!#488", Array{Array{Bool, 1}, 1}})
precompile(Tuple{typeof(DataFrames.make_pair_concrete), Pair{A, B} where B where A})
precompile(Tuple{typeof(DataFrames.make_pair_concrete), Any})
precompile(Tuple{typeof(DataFrames.normalize_selection), DataFrames.Index, Pair{var"#s60", var"#s59"} where var"#s59"<:(Pair{var"#s54", var"#s53"} where var"#s53"<:Union{AbstractString, Symbol} where var"#s54"<:Union{Function, Type}) where var"#s60"<:Union{AbstractString, Signed, Symbol, Unsigned}, Bool})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Pair{typeof(Base.maximum), Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Pair{typeof(Base.first), Symbol}})
precompile(Tuple{Type{DataFrames.Reduce{O, C, A} where A where C where O}, typeof(Base.max), Nothing, Nothing, Bool})
precompile(Tuple{Type{DataFrames.Reduce{O, C, A} where A where C where O}, Function})
precompile(Tuple{DataFrames.var"#719#728"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Base.maximum), Symbol}}})
precompile(Tuple{typeof(DataFrames.check_aggregate), typeof(Base.maximum), Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#720#729"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Base.maximum), Symbol}}})
precompile(Tuple{Type{DataFrames.Aggregate{typeof(Base.first), Nothing}}, Function, Nothing})
precompile(Tuple{Type{DataFrames.Aggregate{F, C} where C where F}, Function})
precompile(Tuple{DataFrames.var"#720#729"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Base.first), Symbol}}})
precompile(Tuple{typeof(DataFrames.check_aggregate), typeof(Base.first), Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#721#730"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Bool, Bool, DataFrames.DataFrame, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Base.RefValue{Array{Int64, 1}}, Bool, Pair{Int64, Pair{typeof(Base.maximum), Symbol}}}})
precompile(Tuple{DataFrames.Reduce{typeof(Base.max), Nothing, Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames.groupreduce!_helper), Array{Int64, 1}, DataFrames.var"#766#767", typeof(Base.max), Nothing, Nothing, Bool, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Base.Iterators.PartitionIterator{Base.OneTo{Int64}}})
precompile(Tuple{DataFrames.var"#721#730"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Bool, Bool, DataFrames.DataFrame, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Base.RefValue{Array{Int64, 1}}, Bool, Pair{Int64, Pair{typeof(Base.first), Symbol}}}})
precompile(Tuple{DataFrames.Aggregate{typeof(Base.first), Nothing}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.var"#681#682"{Bool, DataFrames.DataFrame, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Symbol}})
precompile(Tuple{DataFrames.var"#725#734"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Array{DataFrames.TransformationResult, 1}, Int64}})
precompile(Tuple{typeof(DataFrames.reorder_cols!), Array{DataFrames.TransformationResult, 1}, Int64, Array{Int64, 1}, Array{Int64, 1}, Bool, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.var"#727#736"{Array{AbstractArray{T, 1} where T, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractArray{var"#s81", 1} where var"#s81"}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Base.Generator{Base.Iterators.Filter{Base.var"#134#135"{Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}}, Array{Symbol, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(DataFrames.groupby), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Union{Base.Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair{A, B} where B where A, Type, DataAPI.All{T} where T<:Tuple, DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}, DataAPI.Cols{T} where T<:Tuple, InvertedIndices.InvertedIndex{S} where S, Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T}})
precompile(Tuple{DataFrames.var"##combine#739", Bool, Bool, Bool, Bool, typeof(DataFrames.combine), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Union{Base.Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair{A, B} where B where A, Type, DataAPI.All{T} where T<:Tuple, DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}, DataAPI.Cols{T} where T<:Tuple, InvertedIndices.InvertedIndex{S} where S, Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T}, Vararg{Union{Base.Regex, AbstractString, Function, Signed, Symbol, Unsigned, Pair{A, B} where B where A, Type, DataAPI.All{T} where T<:Tuple, DataAPI.Between{T1, T2} where T2<:Union{Int64, Symbol} where T1<:Union{Int64, Symbol}, DataAPI.Cols{T} where T<:Tuple, InvertedIndices.InvertedIndex{S} where S, Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T}}})
precompile(Tuple{typeof(Base.map), DataFrames.var"#740#741"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Tuple{Pair{Symbol, Pair{typeof(Statistics.median), Symbol}}}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Pair{typeof(Statistics.median), Symbol}})
precompile(Tuple{DataFrames.var"#719#728"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Statistics.median), Symbol}}})
precompile(Tuple{DataFrames.var"#720#729"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Statistics.median), Symbol}}})
precompile(Tuple{DataFrames.var"#721#730"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Bool, Bool, DataFrames.DataFrame, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Base.RefValue{Array{Int64, 1}}, Bool, Pair{Int64, Pair{typeof(Statistics.median), Symbol}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{typeof(Statistics.median), Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{typeof(Statistics.median), Symbol}, Int64, Int64})
precompile(Tuple{typeof(DataFrames.do_call), typeof(Statistics.median), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.lock), DataFrames.var"#693#695"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Base.RefValue{Array{Int64, 1}}, Float64}, Base.ReentrantLock})
precompile(Tuple{typeof(DataFrames.wrap), Float64})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:x1,), Tuple{Float64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, NamedTuple{(:x1,), Tuple{Float64}}})
precompile(Tuple{Type{NamedTuple{(:x1,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.any), Function, NamedTuple{(:x1,), Tuple{DataType}}})
precompile(Tuple{typeof(Base._any), DataFrames.var"#775#778", NamedTuple{(:x1,), Tuple{DataType}}, Base.Colon})
precompile(Tuple{typeof(Base.ntuple), DataFrames.var"#776#779"{NamedTuple{(:x1,), Tuple{DataType}}, Int64}, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.propertynames), NamedTuple{(:x1,), Tuple{Float64}}})
precompile(Tuple{Type{Ref{Any}}, Function})
precompile(Tuple{Type{Ref{Any}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.fill_row!), NamedTuple{(:x1,), Tuple{Float64}}, Tuple{Array{Float64, 1}}, Int64, Int64, Tuple{Symbol}})
precompile(Tuple{Type{Ref{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s382"}} where var"#s382"}}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.collect), Type{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.Iterators.only), Int64})
precompile(Tuple{DataFrames.var"#694#696"{Bool, Base.Dict{Symbol, Tuple{Bool, Int64}}, Array{DataFrames.TransformationResult, 1}, Symbol, Array{Float64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(DataFrames.reorder_cols!), Array{DataFrames.TransformationResult, 1}, Int64, Array{Float64, 1}, Array{Int64, 1}, Bool, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{DataFrames.var"#727#736"{Array{AbstractArray{T, 1} where T, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, typeof(Base.:(!)), Symbol})
precompile(Tuple{DataFrames.var"#719#728"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}, Pair{Int64, Pair{typeof(Base.first), Symbol}}})
precompile(Tuple{typeof(DataFrames.do_call), typeof(Statistics.median), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{Type{Ref{Any}}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Any})
precompile(Tuple{DataFrames.var"#548#549"{DataFrames.DataFrame}, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Int64})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{Base.var"#134#135"{Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}}, Base.UnitRange{Int64}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.Broadcast.dotview), DataFrames.DataFrame, typeof(Base.:(!)), Symbol})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol, DataFrames.DataFrame}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Float64}}})
precompile(Tuple{DataAPI.var"#outerjoin##kw", NamedTuple{(:on,), Tuple{Symbol}}, typeof(DataAPI.outerjoin), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.any), Function, Array{Int64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#618#619", Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.eachcol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.collect), DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{Type{Base.IndexStyle}, Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(DataAPI.refarray), Array{Int64, 1}})
precompile(Tuple{typeof(DataAPI.refpool), Array{Int64, 1}})
precompile(Tuple{typeof(DataAPI.invrefpool), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{Int64, 1}, Array{Int64, 1}, Nothing, Nothing})
precompile(Tuple{typeof(Base.Iterators.zip), Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{AbstractArray{T, 1} where T, 1}, Array{AbstractArray{T, 1} where T, 1}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{Int64, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Int64, 1}})
precompile(Tuple{typeof(Base.issorted), Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._innerjoin_sorted), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#select##kw", NamedTuple{(:copycols,), Tuple{Bool}}, typeof(DataFrames.select), DataFrames.DataFrame, Any})
precompile(Tuple{DataFrames.var"#548#549"{DataFrames.DataFrame}, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, InvertedIndices.InvertedIndex{Array{Symbol, 1}}})
precompile(Tuple{typeof(DataAPI.ncol), DataFrames.DataFrame})
precompile(Tuple{Type{Array{AbstractArray{T, 1} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Tables.columnindex), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, DataFrames.var"#624#627"{DataFrames.DataFrameJoiner}}, Int64})
precompile(Tuple{typeof(Base.setdiff), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.map), Base.Iterators.var"#5#6", Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(DataFrames.similar_outer), Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{DataFrames.DataFrameColumns{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame}}, Tuple{Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._noon_compose_helper!), Array{AbstractArray{T, 1} where T, 1}, typeof(DataFrames.similar_missing), Int64, Array{Float64, 1}, Int64, Array{Int64, 1}, Int64, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameColumns{DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(DataFrames._names), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames._rename_cols), Array{Symbol, 1}, typeof(Base.identity)})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.length), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Union{Base.Missing, Float64}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(DataFrames._propagate_join_metadata!), DataFrames.DataFrameJoiner, DataFrames.DataFrame, DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(DataAPI.emptycolmetadata!), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(DataFrames._merge_matching_table_note_metadata!), DataFrames.DataFrame, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), DataFrames.LazyNewColDataFrame{Symbol, DataFrames.DataFrame}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.eltype), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Float64}, 1}, Array{Float64, 1}})
precompile(Tuple{DataFrames.var"#786#789"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Tuple{Symbol}, Tuple{Array{Float64, 1}}, typeof(Statistics.median), Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s382"}} where var"#s382"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, Tuple{Array{Float64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s382"}} where var"#s382"}, Array{Bool, 1}, Base.ReentrantLock, typeof(Statistics.median), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Float64, 1}}, Tuple{Symbol}, DataFrames.FirstSingleCol})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Tuple{Nothing, Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Tuple{Nothing, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.axes), Tuple})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.first), Tuple{Tuple{Tuple{Nothing, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}}}}}, Function, Tuple{Tuple{Tuple{Nothing, Nothing}}}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.last), Tuple{Tuple{Tuple{Nothing, Nothing}}}}})
precompile(Tuple{typeof(DataFrames.row_group_slots), Tuple{Array{Int64, 1}}, Tuple{Nothing}, Tuple{Nothing}, Base.Val{false}, Array{Int64, 1}, Bool, Bool})
precompile(Tuple{DataFrames.var"#786#789"{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Bool, Tuple{Symbol}, Tuple{Array{Int64, 1}}, typeof(Statistics.median), Array{Bool, 1}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s382"}} where var"#s382"}, Base.ReentrantLock, Array{Int64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._combine_rows_with_first_task!), Int64, Int64, Int64, Int64, Tuple{Array{Float64, 1}}, Base.RefValue{Tuple{Vararg{AbstractArray{T, 1} where T, var"#s382"}} where var"#s382"}, Array{Bool, 1}, Base.ReentrantLock, typeof(Statistics.median), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Array{Int64, 1}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Tuple{Symbol}, DataFrames.FirstSingleCol})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(DataFrames._noon_compose_helper!), Array{AbstractArray{T, 1} where T, 1}, typeof(DataFrames.similar_missing), Int64, Array{Float64, 1}, Int64, Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:copycols, :renamecols, :threads), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols, :renamecols, :threads), Tuple{Bool, Bool, Bool}}, Symbol})
precompile(Tuple{typeof(DataFrames.select!), DataFrames.DataFrame, Any, Any})
precompile(Tuple{typeof(Base.map), DataFrames.var"#548#549"{DataFrames.DataFrame}, Tuple{InvertedIndices.InvertedIndex{Symbol}, Pair{Symbol, Pair{SpatialRust.var"#30#32"{Int64}, Symbol}}}})
precompile(Tuple{DataFrames.var"#manipulate##kw", NamedTuple{(:copycols, :keeprows, :renamecols), Tuple{Bool, Bool, Bool}}, typeof(DataFrames.manipulate), DataFrames.DataFrame, Any, Any, Vararg{Any}})
precompile(Tuple{DataFrames.var"##manipulate#558", Bool, Bool, Bool, typeof(DataFrames.manipulate), DataFrames.DataFrame, Any, Vararg{Any}})
precompile(Tuple{typeof(DataFrames.normalize_selection), DataFrames.Index, Any, Bool})
precompile(Tuple{typeof(Base.getindex), DataFrames.Index, InvertedIndices.InvertedIndex{Symbol}})
precompile(Tuple{typeof(Core.convert), Type{SpatialRust.var"#30#32"{Int64}}, SpatialRust.var"#30#32"{Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Pair{SpatialRust.var"#30#32"{Int64}, Symbol}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Int64, Pair{SpatialRust.var"#30#32"{Int64}, Symbol}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, typeof(Base.:(!)), Int64})
precompile(Tuple{typeof(DataFrames._transformation_helper), DataFrames.DataFrame, Int64, Base.RefValue{Any}})
precompile(Tuple{SpatialRust.var"#30#32"{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(DataFrames._add_col_check_copy), DataFrames.DataFrame, DataFrames.DataFrame, Int64, Bool, Base.RefValue{Any}, Symbol, Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(DataFrames._filter!_helper), DataFrames.DataFrame, Base.Fix2{typeof(Base.:(>)), Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.std), Array{Float64, 1}})
precompile(Tuple{typeof(Statistics.cor), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{SpatialRust.Weather{455}}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{SpatialRust.Props}, SpatialRust.Weather{455}, SpatialRust.CoffeePars, SpatialRust.RustPars, SpatialRust.MngPars{1, 0}, SpatialRust.Books, Array{Int64, 2}, Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(SpatialRust.abc_run_2018!), Agents.AgentBasedModel{Agents.GridSpaceSingle{2, false}, SpatialRust.Coffee, typeof(Agents.Schedulers.fastest), SpatialRust.Props, Random.TaskLocalRNG}, Function, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SpatialRust.new_harvest_cycle!), Tuple{Array{SpatialRust.Coffee, 1}, Float64, Int64, Int64}}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.append!), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Array{Union{Base.Missing, Int64}, 1}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._any), DataFrames.var"#618#619", Array{Union{Base.Missing, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(DataAPI.refarray), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataAPI.refpool), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataAPI.invrefpool), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(DataFrames.check_mapping_allowed), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Nothing, Nothing})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(DataFrames.prepare_on_col), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}}, Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.isempty), DataFrames.OnCol{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, 2}})
precompile(Tuple{typeof(Base.issorted), DataFrames.OnCol{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, 2}})
precompile(Tuple{typeof(DataFrames._innerjoin_unsorted), DataFrames.OnCol{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, 2}, DataFrames.OnCol{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}}, 2}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(DataFrames.similar_outer), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.view), Array{Union{Base.Missing, Int64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(DataFrames._noon_compose_helper!), Array{AbstractArray{T, 1} where T, 1}, typeof(DataFrames.similar_missing), Int64, Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Int64, 1}, Int64, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Base.SubArray{Union{Base.Missing, Float64}, 1, Array{Union{Base.Missing, Float64}, 1}, Tuple{Array{Int64, 1}}, false}, Int64, Int64})
precompile(Tuple{typeof(DataFrames._rename_cols), Array{Symbol, 1}, String})
precompile(Tuple{typeof(Base.isempty), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:p_row, :exh_sun, :prod_clr_sun, :exh_shade, :prod_clr_shade, :exh_spct, :prod_clr_cor), T} where T<:Tuple}, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:p_row, :exh_sun, :prod_clr_sun, :exh_shade, :prod_clr_shade, :exh_spct, :prod_clr_cor), Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Float64}}, Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(DataFrames._preprocess_column), Int64, Int64, Bool})
precompile(Tuple{typeof(DataFrames._preprocess_column), Float64, Int64, Bool})
precompile(Tuple{typeof(Base._similar_for), DataFrames.DataFrameRows{DataFrames.DataFrame}, Type{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, Main.var"#5#6"}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.ndims), Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, Base.Generator{DataFrames.DataFrameRows{DataFrames.DataFrame}, Main.var"#5#6"}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(DataFrames._innerjoin_unsorted_int), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.isassigned), Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.TTY}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Core.convert), Type{DataType}, Type{DataFrames.DataFrame}})
precompile(Tuple{Base.var"#4#5"{DataFrames.var"#800#802"{Base.Dict{Any, String}}}, Tuple{Union, Int64}})
precompile(Tuple{typeof(Base.get!), DataFrames.var"#801#803"{Union, Int64}, Base.Dict{Any, String}, Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.get!), DataFrames.var"#801#803"{Union, Int64}, Base.Dict{Any, String}, Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Nothing})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Pair{Symbol, Array{Any, 1}}})
precompile(Tuple{PrettyTables.var"#_pt_text##kw", NamedTuple{(:alignment_anchor_fallback, :alignment_anchor_regex, :crop, :ellipsis_line_skip, :hlines, :highlighters, :maximum_columns_width, :newline_at_end, :reserved_display_lines, :row_label_crayon, :vcrop_mode, :vlines), Tuple{Symbol, Base.Dict{Int64, Array{Base.Regex, 1}}, Symbol, Int64, Array{Symbol, 1}, Tuple{PrettyTables.Highlighter}, Array{Int64, 1}, Bool, Int64, Crayons.Crayon, Symbol, Array{Int64, 1}}}, typeof(PrettyTables._pt_text), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PrettyTables.PrintInfo})
precompile(Tuple{typeof(PrettyTables._fill_matrix_data!), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Array{String, 1}, 2}, PrettyTables.ProcessedTable, Array{Int64, 1}, PrettyTables.Display, Ref{Any}, Array{Int64, 1}, Bool, Bool, Array{Int64, 1}, Bool, Bool, Bool, Bool, Array{Int64, 1}, Array{Int64, 1}, Base.Val{:print}, Symbol})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Int64}, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.isassigned), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(DataFrames._pretty_tables_general_formatter), Base.Missing, Int64, Int64})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(PrettyTables._process_data_cell_text), PrettyTables.ProcessedTable, Base.Missing, String, Int64, Int64, Int64, Int64, Crayons.Crayon, Symbol, Ref{Any}})
precompile(Tuple{PrettyTables.var"#5#7", PrettyTables.Highlighter, DataFrames.DataFrame, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context, :sizehint), Tuple{Base.IOContext{Base.TTY}, Int64}}, typeof(Base.sprint), Function, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.replace_in_print_matrix), Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}, Int64, Int64, String})
precompile(Tuple{typeof(Base.reduce), Function, Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(SpatialRust.cat_dfs)}, Type{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{String, 1}, 1}}})
precompile(Tuple{Type{NamedTuple{(:makeunique, :copycols), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:makeunique, :copycols), Tuple{Bool, Bool}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:cols, :source), T} where T<:Tuple}, Tuple{Symbol, Nothing}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:cols, :source), Tuple{Symbol, Nothing}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:cols,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:cols,), Tuple{Symbol}}, Symbol})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(SpatialRust.cat_dfs), Base.IndexLinear, Array{Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, 1}})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.union), Array{String, 1}})
precompile(Tuple{typeof(Base.intersect), Array{String, 1}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Type{String}, Base.Generator{Base.Iterators.Filter{Base.var"#134#135"{Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{String}}}, Array{String, 1}}, typeof(Base.identity)}})
precompile(Tuple{DataFrames.var"#147#154"{String}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Array{Union{Base.Missing, Int64}, 1}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.ndims), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Base.Generator{Array{Array{Union{Base.Missing, Int64}, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.eltype), typeof(Base.promote_type)}, Type{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(Base.reduce_first), Function, Type})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Union{Base.Missing, Int64}, 1}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Int64}, 1}, Base.Missing})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, Int64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Int64, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Array{Union{Base.Missing, Float64}, 1}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.ndims), Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Base.Generator{Array{Array{Union{Base.Missing, Float64}, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.eltype), typeof(Base.promote_type)}, Type{Array{Union{Base.Missing, Float64}, 1}}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Union{Base.Missing, Float64}, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Union{Base.Missing, Float64}}, Int64})
precompile(Tuple{Type{Array{Union{Base.Missing, Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Base.Missing, Float64}, 1}, Base.Missing})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Float64}, 1}, Int64, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Int64, 1}, 1}, Base.Generator{Array{Array{Int64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{DataFrames.var"#148#155", DataFrames.DataFrame})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.AbstractDataFrame, 1}, Type{Array{Float64, 1}}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.ndims), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{DataFrames.AbstractDataFrame, 1}, DataFrames.var"#147#154"{String}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Array{Float64, 1}, 1}, Base.Generator{Array{Array{Float64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}, Int64, Int64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Tuple{DataFrames.DataFrame, DataFrames.DataFrame}})
precompile(Tuple{PrettyTables.var"#_parse_cell_text##kw", NamedTuple{(:autowrap, :cell_data_type, :cell_first_line_only, :column_width, :compact_printing, :has_color, :limit_printing, :linebreaks, :renderer), Tuple{Bool, DataType, Bool, Int64, Bool, Bool, Bool, Bool, Base.Val{:print}}}, typeof(PrettyTables._parse_cell_text), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.SSLContext})
precompile(Tuple{typeof(OpenSSL.free), OpenSSL.BIOMethod})
